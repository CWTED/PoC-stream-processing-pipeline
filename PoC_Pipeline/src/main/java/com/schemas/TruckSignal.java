/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.schemas;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class TruckSignal extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4088524663697491472L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TruckSignal\",\"namespace\":\"com.schemas\",\"fields\":[{\"name\":\"customer\",\"type\":\"string\"},{\"name\":\"vehicle\",\"type\":\"string\"},{\"name\":\"signal\",\"type\":\"string\"},{\"name\":\"value\",\"type\":\"float\"},{\"name\":\"padding\",\"type\":\"string\"},{\"name\":\"timestamp\",\"type\":{\"type\":\"long\",\"logicalType\":\"local-timestamp-millis\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.LocalTimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<TruckSignal> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TruckSignal> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<TruckSignal> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<TruckSignal> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<TruckSignal> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this TruckSignal to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a TruckSignal from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a TruckSignal instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static TruckSignal fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence customer;
  private java.lang.CharSequence vehicle;
  private java.lang.CharSequence signal;
  private float value;
  private java.lang.CharSequence padding;
  private java.time.LocalDateTime timestamp;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TruckSignal() {}

  /**
   * All-args constructor.
   * @param customer The new value for customer
   * @param vehicle The new value for vehicle
   * @param signal The new value for signal
   * @param value The new value for value
   * @param padding The new value for padding
   * @param timestamp The new value for timestamp
   */
  public TruckSignal(java.lang.CharSequence customer, java.lang.CharSequence vehicle, java.lang.CharSequence signal, java.lang.Float value, java.lang.CharSequence padding, java.time.LocalDateTime timestamp) {
    this.customer = customer;
    this.vehicle = vehicle;
    this.signal = signal;
    this.value = value;
    this.padding = padding;
    this.timestamp = timestamp;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return customer;
    case 1: return vehicle;
    case 2: return signal;
    case 3: return value;
    case 4: return padding;
    case 5: return timestamp;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      null,
      null,
      new org.apache.avro.data.TimeConversions.LocalTimestampMillisConversion(),
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: customer = (java.lang.CharSequence)value$; break;
    case 1: vehicle = (java.lang.CharSequence)value$; break;
    case 2: signal = (java.lang.CharSequence)value$; break;
    case 3: value = (java.lang.Float)value$; break;
    case 4: padding = (java.lang.CharSequence)value$; break;
    case 5: timestamp = (java.time.LocalDateTime)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'customer' field.
   * @return The value of the 'customer' field.
   */
  public java.lang.CharSequence getCustomer() {
    return customer;
  }


  /**
   * Sets the value of the 'customer' field.
   * @param value the value to set.
   */
  public void setCustomer(java.lang.CharSequence value) {
    this.customer = value;
  }

  /**
   * Gets the value of the 'vehicle' field.
   * @return The value of the 'vehicle' field.
   */
  public java.lang.CharSequence getVehicle() {
    return vehicle;
  }


  /**
   * Sets the value of the 'vehicle' field.
   * @param value the value to set.
   */
  public void setVehicle(java.lang.CharSequence value) {
    this.vehicle = value;
  }

  /**
   * Gets the value of the 'signal' field.
   * @return The value of the 'signal' field.
   */
  public java.lang.CharSequence getSignal() {
    return signal;
  }


  /**
   * Sets the value of the 'signal' field.
   * @param value the value to set.
   */
  public void setSignal(java.lang.CharSequence value) {
    this.signal = value;
  }

  /**
   * Gets the value of the 'value' field.
   * @return The value of the 'value' field.
   */
  public float getValue() {
    return value;
  }


  /**
   * Sets the value of the 'value' field.
   * @param value the value to set.
   */
  public void setValue(float value) {
    this.value = value;
  }

  /**
   * Gets the value of the 'padding' field.
   * @return The value of the 'padding' field.
   */
  public java.lang.CharSequence getPadding() {
    return padding;
  }


  /**
   * Sets the value of the 'padding' field.
   * @param value the value to set.
   */
  public void setPadding(java.lang.CharSequence value) {
    this.padding = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public java.time.LocalDateTime getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.time.LocalDateTime value) {
    this.timestamp = value;
  }

  /**
   * Creates a new TruckSignal RecordBuilder.
   * @return A new TruckSignal RecordBuilder
   */
  public static com.schemas.TruckSignal.Builder newBuilder() {
    return new com.schemas.TruckSignal.Builder();
  }

  /**
   * Creates a new TruckSignal RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TruckSignal RecordBuilder
   */
  public static com.schemas.TruckSignal.Builder newBuilder(com.schemas.TruckSignal.Builder other) {
    if (other == null) {
      return new com.schemas.TruckSignal.Builder();
    } else {
      return new com.schemas.TruckSignal.Builder(other);
    }
  }

  /**
   * Creates a new TruckSignal RecordBuilder by copying an existing TruckSignal instance.
   * @param other The existing instance to copy.
   * @return A new TruckSignal RecordBuilder
   */
  public static com.schemas.TruckSignal.Builder newBuilder(com.schemas.TruckSignal other) {
    if (other == null) {
      return new com.schemas.TruckSignal.Builder();
    } else {
      return new com.schemas.TruckSignal.Builder(other);
    }
  }

  /**
   * RecordBuilder for TruckSignal instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TruckSignal>
    implements org.apache.avro.data.RecordBuilder<TruckSignal> {

    private java.lang.CharSequence customer;
    private java.lang.CharSequence vehicle;
    private java.lang.CharSequence signal;
    private float value;
    private java.lang.CharSequence padding;
    private java.time.LocalDateTime timestamp;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.schemas.TruckSignal.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.customer)) {
        this.customer = data().deepCopy(fields()[0].schema(), other.customer);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.vehicle)) {
        this.vehicle = data().deepCopy(fields()[1].schema(), other.vehicle);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.signal)) {
        this.signal = data().deepCopy(fields()[2].schema(), other.signal);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.value)) {
        this.value = data().deepCopy(fields()[3].schema(), other.value);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.padding)) {
        this.padding = data().deepCopy(fields()[4].schema(), other.padding);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[5].schema(), other.timestamp);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing TruckSignal instance
     * @param other The existing instance to copy.
     */
    private Builder(com.schemas.TruckSignal other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.customer)) {
        this.customer = data().deepCopy(fields()[0].schema(), other.customer);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.vehicle)) {
        this.vehicle = data().deepCopy(fields()[1].schema(), other.vehicle);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.signal)) {
        this.signal = data().deepCopy(fields()[2].schema(), other.signal);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.value)) {
        this.value = data().deepCopy(fields()[3].schema(), other.value);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.padding)) {
        this.padding = data().deepCopy(fields()[4].schema(), other.padding);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[5].schema(), other.timestamp);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'customer' field.
      * @return The value.
      */
    public java.lang.CharSequence getCustomer() {
      return customer;
    }


    /**
      * Sets the value of the 'customer' field.
      * @param value The value of 'customer'.
      * @return This builder.
      */
    public com.schemas.TruckSignal.Builder setCustomer(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.customer = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'customer' field has been set.
      * @return True if the 'customer' field has been set, false otherwise.
      */
    public boolean hasCustomer() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'customer' field.
      * @return This builder.
      */
    public com.schemas.TruckSignal.Builder clearCustomer() {
      customer = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'vehicle' field.
      * @return The value.
      */
    public java.lang.CharSequence getVehicle() {
      return vehicle;
    }


    /**
      * Sets the value of the 'vehicle' field.
      * @param value The value of 'vehicle'.
      * @return This builder.
      */
    public com.schemas.TruckSignal.Builder setVehicle(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.vehicle = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'vehicle' field has been set.
      * @return True if the 'vehicle' field has been set, false otherwise.
      */
    public boolean hasVehicle() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'vehicle' field.
      * @return This builder.
      */
    public com.schemas.TruckSignal.Builder clearVehicle() {
      vehicle = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'signal' field.
      * @return The value.
      */
    public java.lang.CharSequence getSignal() {
      return signal;
    }


    /**
      * Sets the value of the 'signal' field.
      * @param value The value of 'signal'.
      * @return This builder.
      */
    public com.schemas.TruckSignal.Builder setSignal(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.signal = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'signal' field has been set.
      * @return True if the 'signal' field has been set, false otherwise.
      */
    public boolean hasSignal() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'signal' field.
      * @return This builder.
      */
    public com.schemas.TruckSignal.Builder clearSignal() {
      signal = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'value' field.
      * @return The value.
      */
    public float getValue() {
      return value;
    }


    /**
      * Sets the value of the 'value' field.
      * @param value The value of 'value'.
      * @return This builder.
      */
    public com.schemas.TruckSignal.Builder setValue(float value) {
      validate(fields()[3], value);
      this.value = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'value' field has been set.
      * @return True if the 'value' field has been set, false otherwise.
      */
    public boolean hasValue() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'value' field.
      * @return This builder.
      */
    public com.schemas.TruckSignal.Builder clearValue() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'padding' field.
      * @return The value.
      */
    public java.lang.CharSequence getPadding() {
      return padding;
    }


    /**
      * Sets the value of the 'padding' field.
      * @param value The value of 'padding'.
      * @return This builder.
      */
    public com.schemas.TruckSignal.Builder setPadding(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.padding = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'padding' field has been set.
      * @return True if the 'padding' field has been set, false otherwise.
      */
    public boolean hasPadding() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'padding' field.
      * @return This builder.
      */
    public com.schemas.TruckSignal.Builder clearPadding() {
      padding = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public java.time.LocalDateTime getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public com.schemas.TruckSignal.Builder setTimestamp(java.time.LocalDateTime value) {
      validate(fields()[5], value);
      this.timestamp = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public com.schemas.TruckSignal.Builder clearTimestamp() {
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TruckSignal build() {
      try {
        TruckSignal record = new TruckSignal();
        record.customer = fieldSetFlags()[0] ? this.customer : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.vehicle = fieldSetFlags()[1] ? this.vehicle : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.signal = fieldSetFlags()[2] ? this.signal : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.value = fieldSetFlags()[3] ? this.value : (java.lang.Float) defaultValue(fields()[3]);
        record.padding = fieldSetFlags()[4] ? this.padding : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.timestamp = fieldSetFlags()[5] ? this.timestamp : (java.time.LocalDateTime) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TruckSignal>
    WRITER$ = (org.apache.avro.io.DatumWriter<TruckSignal>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TruckSignal>
    READER$ = (org.apache.avro.io.DatumReader<TruckSignal>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










