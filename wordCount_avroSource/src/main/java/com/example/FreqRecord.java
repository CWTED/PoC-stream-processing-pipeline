/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.example;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class FreqRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7023825341030430118L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FreqRecord\",\"namespace\":\"com.example\",\"fields\":[{\"name\":\"eventTime\",\"type\":{\"type\":\"long\",\"logicalType\":\"local-timestamp-millis\"}},{\"name\":\"aggEndTime\",\"type\":{\"type\":\"long\",\"logicalType\":\"local-timestamp-millis\"}},{\"name\":\"customer\",\"type\":\"string\"},{\"name\":\"vehicle\",\"type\":\"string\"},{\"name\":\"signal\",\"type\":\"string\"},{\"name\":\"minFreq\",\"type\":\"int\"},{\"name\":\"hourFreq\",\"type\":\"int\"},{\"name\":\"dayFreq\",\"type\":\"int\"},{\"name\":\"granularity\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.LocalTimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<FreqRecord> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<FreqRecord> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<FreqRecord> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<FreqRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<FreqRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this FreqRecord to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a FreqRecord from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a FreqRecord instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static FreqRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.time.LocalDateTime eventTime;
  private java.time.LocalDateTime aggEndTime;
  private java.lang.CharSequence customer;
  private java.lang.CharSequence vehicle;
  private java.lang.CharSequence signal;
  private int minFreq;
  private int hourFreq;
  private int dayFreq;
  private java.lang.CharSequence granularity;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public FreqRecord() {}

  /**
   * All-args constructor.
   * @param eventTime The new value for eventTime
   * @param aggEndTime The new value for aggEndTime
   * @param customer The new value for customer
   * @param vehicle The new value for vehicle
   * @param signal The new value for signal
   * @param minFreq The new value for minFreq
   * @param hourFreq The new value for hourFreq
   * @param dayFreq The new value for dayFreq
   * @param granularity The new value for granularity
   */
  public FreqRecord(java.time.LocalDateTime eventTime, java.time.LocalDateTime aggEndTime, java.lang.CharSequence customer, java.lang.CharSequence vehicle, java.lang.CharSequence signal, java.lang.Integer minFreq, java.lang.Integer hourFreq, java.lang.Integer dayFreq, java.lang.CharSequence granularity) {
    this.eventTime = eventTime;
    this.aggEndTime = aggEndTime;
    this.customer = customer;
    this.vehicle = vehicle;
    this.signal = signal;
    this.minFreq = minFreq;
    this.hourFreq = hourFreq;
    this.dayFreq = dayFreq;
    this.granularity = granularity;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return eventTime;
    case 1: return aggEndTime;
    case 2: return customer;
    case 3: return vehicle;
    case 4: return signal;
    case 5: return minFreq;
    case 6: return hourFreq;
    case 7: return dayFreq;
    case 8: return granularity;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      new org.apache.avro.data.TimeConversions.LocalTimestampMillisConversion(),
      new org.apache.avro.data.TimeConversions.LocalTimestampMillisConversion(),
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: eventTime = (java.time.LocalDateTime)value$; break;
    case 1: aggEndTime = (java.time.LocalDateTime)value$; break;
    case 2: customer = (java.lang.CharSequence)value$; break;
    case 3: vehicle = (java.lang.CharSequence)value$; break;
    case 4: signal = (java.lang.CharSequence)value$; break;
    case 5: minFreq = (java.lang.Integer)value$; break;
    case 6: hourFreq = (java.lang.Integer)value$; break;
    case 7: dayFreq = (java.lang.Integer)value$; break;
    case 8: granularity = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'eventTime' field.
   * @return The value of the 'eventTime' field.
   */
  public java.time.LocalDateTime getEventTime() {
    return eventTime;
  }


  /**
   * Sets the value of the 'eventTime' field.
   * @param value the value to set.
   */
  public void setEventTime(java.time.LocalDateTime value) {
    this.eventTime = value;
  }

  /**
   * Gets the value of the 'aggEndTime' field.
   * @return The value of the 'aggEndTime' field.
   */
  public java.time.LocalDateTime getAggEndTime() {
    return aggEndTime;
  }


  /**
   * Sets the value of the 'aggEndTime' field.
   * @param value the value to set.
   */
  public void setAggEndTime(java.time.LocalDateTime value) {
    this.aggEndTime = value;
  }

  /**
   * Gets the value of the 'customer' field.
   * @return The value of the 'customer' field.
   */
  public java.lang.CharSequence getCustomer() {
    return customer;
  }


  /**
   * Sets the value of the 'customer' field.
   * @param value the value to set.
   */
  public void setCustomer(java.lang.CharSequence value) {
    this.customer = value;
  }

  /**
   * Gets the value of the 'vehicle' field.
   * @return The value of the 'vehicle' field.
   */
  public java.lang.CharSequence getVehicle() {
    return vehicle;
  }


  /**
   * Sets the value of the 'vehicle' field.
   * @param value the value to set.
   */
  public void setVehicle(java.lang.CharSequence value) {
    this.vehicle = value;
  }

  /**
   * Gets the value of the 'signal' field.
   * @return The value of the 'signal' field.
   */
  public java.lang.CharSequence getSignal() {
    return signal;
  }


  /**
   * Sets the value of the 'signal' field.
   * @param value the value to set.
   */
  public void setSignal(java.lang.CharSequence value) {
    this.signal = value;
  }

  /**
   * Gets the value of the 'minFreq' field.
   * @return The value of the 'minFreq' field.
   */
  public int getMinFreq() {
    return minFreq;
  }


  /**
   * Sets the value of the 'minFreq' field.
   * @param value the value to set.
   */
  public void setMinFreq(int value) {
    this.minFreq = value;
  }

  /**
   * Gets the value of the 'hourFreq' field.
   * @return The value of the 'hourFreq' field.
   */
  public int getHourFreq() {
    return hourFreq;
  }


  /**
   * Sets the value of the 'hourFreq' field.
   * @param value the value to set.
   */
  public void setHourFreq(int value) {
    this.hourFreq = value;
  }

  /**
   * Gets the value of the 'dayFreq' field.
   * @return The value of the 'dayFreq' field.
   */
  public int getDayFreq() {
    return dayFreq;
  }


  /**
   * Sets the value of the 'dayFreq' field.
   * @param value the value to set.
   */
  public void setDayFreq(int value) {
    this.dayFreq = value;
  }

  /**
   * Gets the value of the 'granularity' field.
   * @return The value of the 'granularity' field.
   */
  public java.lang.CharSequence getGranularity() {
    return granularity;
  }


  /**
   * Sets the value of the 'granularity' field.
   * @param value the value to set.
   */
  public void setGranularity(java.lang.CharSequence value) {
    this.granularity = value;
  }

  /**
   * Creates a new FreqRecord RecordBuilder.
   * @return A new FreqRecord RecordBuilder
   */
  public static com.example.FreqRecord.Builder newBuilder() {
    return new com.example.FreqRecord.Builder();
  }

  /**
   * Creates a new FreqRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new FreqRecord RecordBuilder
   */
  public static com.example.FreqRecord.Builder newBuilder(com.example.FreqRecord.Builder other) {
    if (other == null) {
      return new com.example.FreqRecord.Builder();
    } else {
      return new com.example.FreqRecord.Builder(other);
    }
  }

  /**
   * Creates a new FreqRecord RecordBuilder by copying an existing FreqRecord instance.
   * @param other The existing instance to copy.
   * @return A new FreqRecord RecordBuilder
   */
  public static com.example.FreqRecord.Builder newBuilder(com.example.FreqRecord other) {
    if (other == null) {
      return new com.example.FreqRecord.Builder();
    } else {
      return new com.example.FreqRecord.Builder(other);
    }
  }

  /**
   * RecordBuilder for FreqRecord instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FreqRecord>
    implements org.apache.avro.data.RecordBuilder<FreqRecord> {

    private java.time.LocalDateTime eventTime;
    private java.time.LocalDateTime aggEndTime;
    private java.lang.CharSequence customer;
    private java.lang.CharSequence vehicle;
    private java.lang.CharSequence signal;
    private int minFreq;
    private int hourFreq;
    private int dayFreq;
    private java.lang.CharSequence granularity;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.example.FreqRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.eventTime)) {
        this.eventTime = data().deepCopy(fields()[0].schema(), other.eventTime);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.aggEndTime)) {
        this.aggEndTime = data().deepCopy(fields()[1].schema(), other.aggEndTime);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.customer)) {
        this.customer = data().deepCopy(fields()[2].schema(), other.customer);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.vehicle)) {
        this.vehicle = data().deepCopy(fields()[3].schema(), other.vehicle);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.signal)) {
        this.signal = data().deepCopy(fields()[4].schema(), other.signal);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.minFreq)) {
        this.minFreq = data().deepCopy(fields()[5].schema(), other.minFreq);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.hourFreq)) {
        this.hourFreq = data().deepCopy(fields()[6].schema(), other.hourFreq);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.dayFreq)) {
        this.dayFreq = data().deepCopy(fields()[7].schema(), other.dayFreq);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.granularity)) {
        this.granularity = data().deepCopy(fields()[8].schema(), other.granularity);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
    }

    /**
     * Creates a Builder by copying an existing FreqRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(com.example.FreqRecord other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.eventTime)) {
        this.eventTime = data().deepCopy(fields()[0].schema(), other.eventTime);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.aggEndTime)) {
        this.aggEndTime = data().deepCopy(fields()[1].schema(), other.aggEndTime);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.customer)) {
        this.customer = data().deepCopy(fields()[2].schema(), other.customer);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.vehicle)) {
        this.vehicle = data().deepCopy(fields()[3].schema(), other.vehicle);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.signal)) {
        this.signal = data().deepCopy(fields()[4].schema(), other.signal);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.minFreq)) {
        this.minFreq = data().deepCopy(fields()[5].schema(), other.minFreq);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.hourFreq)) {
        this.hourFreq = data().deepCopy(fields()[6].schema(), other.hourFreq);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.dayFreq)) {
        this.dayFreq = data().deepCopy(fields()[7].schema(), other.dayFreq);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.granularity)) {
        this.granularity = data().deepCopy(fields()[8].schema(), other.granularity);
        fieldSetFlags()[8] = true;
      }
    }

    /**
      * Gets the value of the 'eventTime' field.
      * @return The value.
      */
    public java.time.LocalDateTime getEventTime() {
      return eventTime;
    }


    /**
      * Sets the value of the 'eventTime' field.
      * @param value The value of 'eventTime'.
      * @return This builder.
      */
    public com.example.FreqRecord.Builder setEventTime(java.time.LocalDateTime value) {
      validate(fields()[0], value);
      this.eventTime = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'eventTime' field has been set.
      * @return True if the 'eventTime' field has been set, false otherwise.
      */
    public boolean hasEventTime() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'eventTime' field.
      * @return This builder.
      */
    public com.example.FreqRecord.Builder clearEventTime() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'aggEndTime' field.
      * @return The value.
      */
    public java.time.LocalDateTime getAggEndTime() {
      return aggEndTime;
    }


    /**
      * Sets the value of the 'aggEndTime' field.
      * @param value The value of 'aggEndTime'.
      * @return This builder.
      */
    public com.example.FreqRecord.Builder setAggEndTime(java.time.LocalDateTime value) {
      validate(fields()[1], value);
      this.aggEndTime = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'aggEndTime' field has been set.
      * @return True if the 'aggEndTime' field has been set, false otherwise.
      */
    public boolean hasAggEndTime() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'aggEndTime' field.
      * @return This builder.
      */
    public com.example.FreqRecord.Builder clearAggEndTime() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'customer' field.
      * @return The value.
      */
    public java.lang.CharSequence getCustomer() {
      return customer;
    }


    /**
      * Sets the value of the 'customer' field.
      * @param value The value of 'customer'.
      * @return This builder.
      */
    public com.example.FreqRecord.Builder setCustomer(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.customer = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'customer' field has been set.
      * @return True if the 'customer' field has been set, false otherwise.
      */
    public boolean hasCustomer() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'customer' field.
      * @return This builder.
      */
    public com.example.FreqRecord.Builder clearCustomer() {
      customer = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'vehicle' field.
      * @return The value.
      */
    public java.lang.CharSequence getVehicle() {
      return vehicle;
    }


    /**
      * Sets the value of the 'vehicle' field.
      * @param value The value of 'vehicle'.
      * @return This builder.
      */
    public com.example.FreqRecord.Builder setVehicle(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.vehicle = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'vehicle' field has been set.
      * @return True if the 'vehicle' field has been set, false otherwise.
      */
    public boolean hasVehicle() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'vehicle' field.
      * @return This builder.
      */
    public com.example.FreqRecord.Builder clearVehicle() {
      vehicle = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'signal' field.
      * @return The value.
      */
    public java.lang.CharSequence getSignal() {
      return signal;
    }


    /**
      * Sets the value of the 'signal' field.
      * @param value The value of 'signal'.
      * @return This builder.
      */
    public com.example.FreqRecord.Builder setSignal(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.signal = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'signal' field has been set.
      * @return True if the 'signal' field has been set, false otherwise.
      */
    public boolean hasSignal() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'signal' field.
      * @return This builder.
      */
    public com.example.FreqRecord.Builder clearSignal() {
      signal = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'minFreq' field.
      * @return The value.
      */
    public int getMinFreq() {
      return minFreq;
    }


    /**
      * Sets the value of the 'minFreq' field.
      * @param value The value of 'minFreq'.
      * @return This builder.
      */
    public com.example.FreqRecord.Builder setMinFreq(int value) {
      validate(fields()[5], value);
      this.minFreq = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'minFreq' field has been set.
      * @return True if the 'minFreq' field has been set, false otherwise.
      */
    public boolean hasMinFreq() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'minFreq' field.
      * @return This builder.
      */
    public com.example.FreqRecord.Builder clearMinFreq() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'hourFreq' field.
      * @return The value.
      */
    public int getHourFreq() {
      return hourFreq;
    }


    /**
      * Sets the value of the 'hourFreq' field.
      * @param value The value of 'hourFreq'.
      * @return This builder.
      */
    public com.example.FreqRecord.Builder setHourFreq(int value) {
      validate(fields()[6], value);
      this.hourFreq = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'hourFreq' field has been set.
      * @return True if the 'hourFreq' field has been set, false otherwise.
      */
    public boolean hasHourFreq() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'hourFreq' field.
      * @return This builder.
      */
    public com.example.FreqRecord.Builder clearHourFreq() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'dayFreq' field.
      * @return The value.
      */
    public int getDayFreq() {
      return dayFreq;
    }


    /**
      * Sets the value of the 'dayFreq' field.
      * @param value The value of 'dayFreq'.
      * @return This builder.
      */
    public com.example.FreqRecord.Builder setDayFreq(int value) {
      validate(fields()[7], value);
      this.dayFreq = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'dayFreq' field has been set.
      * @return True if the 'dayFreq' field has been set, false otherwise.
      */
    public boolean hasDayFreq() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'dayFreq' field.
      * @return This builder.
      */
    public com.example.FreqRecord.Builder clearDayFreq() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'granularity' field.
      * @return The value.
      */
    public java.lang.CharSequence getGranularity() {
      return granularity;
    }


    /**
      * Sets the value of the 'granularity' field.
      * @param value The value of 'granularity'.
      * @return This builder.
      */
    public com.example.FreqRecord.Builder setGranularity(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.granularity = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'granularity' field has been set.
      * @return True if the 'granularity' field has been set, false otherwise.
      */
    public boolean hasGranularity() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'granularity' field.
      * @return This builder.
      */
    public com.example.FreqRecord.Builder clearGranularity() {
      granularity = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public FreqRecord build() {
      try {
        FreqRecord record = new FreqRecord();
        record.eventTime = fieldSetFlags()[0] ? this.eventTime : (java.time.LocalDateTime) defaultValue(fields()[0]);
        record.aggEndTime = fieldSetFlags()[1] ? this.aggEndTime : (java.time.LocalDateTime) defaultValue(fields()[1]);
        record.customer = fieldSetFlags()[2] ? this.customer : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.vehicle = fieldSetFlags()[3] ? this.vehicle : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.signal = fieldSetFlags()[4] ? this.signal : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.minFreq = fieldSetFlags()[5] ? this.minFreq : (java.lang.Integer) defaultValue(fields()[5]);
        record.hourFreq = fieldSetFlags()[6] ? this.hourFreq : (java.lang.Integer) defaultValue(fields()[6]);
        record.dayFreq = fieldSetFlags()[7] ? this.dayFreq : (java.lang.Integer) defaultValue(fields()[7]);
        record.granularity = fieldSetFlags()[8] ? this.granularity : (java.lang.CharSequence) defaultValue(fields()[8]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<FreqRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<FreqRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<FreqRecord>
    READER$ = (org.apache.avro.io.DatumReader<FreqRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










